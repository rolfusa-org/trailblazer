name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout and setup
        run: |
          # Configure git
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Clone the repository with full history
          git clone --depth 50 https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git repo
          cd repo
          
          echo "Repository cloned successfully"
          git branch -a
      
      - name: Install dependencies
        run: |
          cd repo
          sudo apt-get update && sudo apt-get install -y jq tree rsync
      
      - name: Parse config and checkout versions
        run: |
          cd repo
          CONFIG_FILE="flavors-config.json"
          
          echo "=== Reading flavors configuration ==="
          cat $CONFIG_FILE | jq .
          
          # Extract flavor count
          FLAVOR_COUNT=$(jq '.flavors | length' $CONFIG_FILE)
          echo "Found $FLAVOR_COUNT flavors in config"
          
          # Loop through each flavor
          for ((i=0; i<$FLAVOR_COUNT; i++)); do
            FLAVOR_KEY=$(jq -r ".flavors[$i].key" $CONFIG_FILE)
            FLAVOR_BRANCH=$(jq -r ".flavors[$i].branch" $CONFIG_FILE)
            FLAVOR_NAME=$(jq -r ".flavors[$i].name" $CONFIG_FILE)
            VERSION_COUNT=$(jq ".flavors[$i].versions | length" $CONFIG_FILE)
            
            echo "=== Processing flavor: $FLAVOR_NAME ($FLAVOR_KEY) ==="
            echo "Branch: $FLAVOR_BRANCH"
            echo "Versions to deploy: $VERSION_COUNT"
            
            if [ "$VERSION_COUNT" -eq 0 ]; then
              echo "No versions configured for $FLAVOR_KEY, skipping..."
              continue
            fi
            
            # Loop through each version of this flavor
            for ((j=0; j<$VERSION_COUNT; j++)); do
              VERSION=$(jq -r ".flavors[$i].versions[$j].version" $CONFIG_FILE)
              TAG=$(jq -r ".flavors[$i].versions[$j].tag" $CONFIG_FILE)
              DEPLOY_PATH=$(jq -r ".flavors[$i].versions[$j].deployPath" $CONFIG_FILE)
              LABEL=$(jq -r ".flavors[$i].versions[$j].label" $CONFIG_FILE)
              
              echo "  → Deploying version $VERSION ($LABEL) from tag $TAG to $DEPLOY_PATH"
              
              # Create a unique directory for this checkout
              CHECKOUT_DIR="../checkout_${FLAVOR_KEY}_${VERSION}"
              
              # Clone and checkout the specific tag
              git clone --depth 1 --branch $TAG https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git $CHECKOUT_DIR 2>/dev/null || {
                echo "  ✗ Failed to checkout tag $TAG"
                continue
              }
              
              echo "  ✓ Successfully checked out $TAG"
            done
          done
          
          echo "=== Checkout complete ==="
          cd ..
          ls -la
      
      - name: Generate version metadata
        run: |
          cd repo
          CONFIG_FILE="flavors-config.json"
          FLAVOR_COUNT=$(jq '.flavors | length' $CONFIG_FILE)
          
          cd ..
          
          # Generate version.json for each deployed version
          for ((i=0; i<$FLAVOR_COUNT; i++)); do
            FLAVOR_KEY=$(jq -r ".flavors[$i].key" repo/$CONFIG_FILE)
            VERSION_COUNT=$(jq ".flavors[$i].versions | length" repo/$CONFIG_FILE)
            
            for ((j=0; j<$VERSION_COUNT; j++)); do
              VERSION=$(jq -r ".flavors[$i].versions[$j].version" repo/$CONFIG_FILE)
              TAG=$(jq -r ".flavors[$i].versions[$j].tag" repo/$CONFIG_FILE)
              FLAVOR_NAME=$(jq -r ".flavors[$i].name" repo/$CONFIG_FILE)
              RELEASE_DATE=$(jq -r ".flavors[$i].versions[$j].releaseDate" repo/$CONFIG_FILE)
              
              CHECKOUT_DIR="checkout_${FLAVOR_KEY}_${VERSION}"
              
              if [ -d "$CHECKOUT_DIR" ]; then
                cd $CHECKOUT_DIR
                COMMIT=$(git rev-parse --short HEAD 2>/dev/null || echo "unknown")
                BUILD_NUM=$(git rev-list --count HEAD 2>/dev/null || echo "0")
                
                # Create version.json using jq
                jq -n \
                  --arg version "$VERSION" \
                  --arg date "$RELEASE_DATE" \
                  --arg commit "$COMMIT" \
                  --argjson buildNumber "$BUILD_NUM" \
                  --arg flavor "$FLAVOR_NAME" \
                  --arg tag "$TAG" \
                  '{version: $version, date: $date, commit: $commit, buildNumber: $buildNumber, flavor: $flavor, tag: $tag}' \
                  > version.json
                
                echo "Generated version.json for $FLAVOR_KEY v$VERSION"
                cd ..
              fi
            done
          done
      
      - name: Build deployment structure
        run: |
          mkdir -p deploy
          
          echo "=== Copying main branch files ==="
          # Copy landing page and shared resources
          cp repo/index.html deploy/
          cp repo/flavors-config.json deploy/
          
          if [ -d "repo/shared" ]; then
            cp -r repo/shared deploy/
            echo "✓ Copied shared components"
          fi
          
          echo "=== Building nested flavor/version structure ==="
          cd repo
          CONFIG_FILE="flavors-config.json"
          FLAVOR_COUNT=$(jq '.flavors | length' $CONFIG_FILE)
          
          cd ..
          
          # Build nested directory structure
          for ((i=0; i<$FLAVOR_COUNT; i++)); do
            FLAVOR_KEY=$(jq -r ".flavors[$i].key" repo/$CONFIG_FILE)
            VERSION_COUNT=$(jq ".flavors[$i].versions | length" repo/$CONFIG_FILE)
            
            for ((j=0; j<$VERSION_COUNT; j++)); do
              VERSION=$(jq -r ".flavors[$i].versions[$j].version" repo/$CONFIG_FILE)
              DEPLOY_PATH=$(jq -r ".flavors[$i].versions[$j].deployPath" repo/$CONFIG_FILE)
              
              CHECKOUT_DIR="checkout_${FLAVOR_KEY}_${VERSION}"
              
              if [ -d "$CHECKOUT_DIR" ]; then
                echo "Copying $CHECKOUT_DIR to deploy/$DEPLOY_PATH"
                mkdir -p "deploy/$DEPLOY_PATH"
                
                # Copy all files except .git directory
                rsync -av --exclude='.git' "$CHECKOUT_DIR/" "deploy/$DEPLOY_PATH/"
                echo "✓ Deployed to $DEPLOY_PATH"
              fi
            done
          done
          
          echo "=== Deployment structure ==="
          tree -L 3 deploy/ 2>/dev/null || find deploy/ -type d | head -20
      
      - name: Deploy to GitHub Pages
        run: |
          cd deploy
          
          # Initialize git in deploy directory
          git init
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Create gh-pages branch
          git checkout -b gh-pages
          
          # Add all files
          git add -A
          
          # Commit
          git commit -m "deploy: update from main @ ${{ github.sha }}"
          
          # Force push to gh-pages branch
          git push --force https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages
          
          echo "✓ Deployed to GitHub Pages"
